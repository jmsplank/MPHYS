
[2020-04-15 16:41:16,729: Fname - __init__.py: Function - wrapper: DEBUG]
CONFIGDIR=/home/james/.config/matplotlib

[2020-04-15 16:41:16,730: Fname - __init__.py: Function - wrapper: DEBUG]
(private) matplotlib data path: /home/james/.local/lib/python3.6/site-packages/matplotlib/mpl-data

[2020-04-15 16:41:16,733: Fname - __init__.py: Function - wrapper: DEBUG]
matplotlib data path: /home/james/.local/lib/python3.6/site-packages/matplotlib/mpl-data

[2020-04-15 16:41:16,733: Fname - __init__.py: Function - rc_params_from_file: DEBUG]
loaded rc file /home/james/.local/lib/python3.6/site-packages/matplotlib/mpl-data/matplotlibrc

[2020-04-15 16:41:16,735: Fname - __init__.py: Function - <module>: DEBUG]
matplotlib version 3.2.1

[2020-04-15 16:41:16,735: Fname - __init__.py: Function - <module>: DEBUG]
interactive is False

[2020-04-15 16:41:16,735: Fname - __init__.py: Function - <module>: DEBUG]
platform is linux

[2020-04-15 16:41:16,735: Fname - __init__.py: Function - <module>: DEBUG]
loaded modules: ['builtins', 'sys', '_frozen_importlib', '_imp', '_warnings', '_thread', '_weakref', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'zipimport', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_weakrefset', '_bootlocale', '_locale', 'site', 'os', 'errno', 'stat', '_stat', 'posixpath', 'genericpath', 'os.path', '_collections_abc', '_sitebuiltins', 'sysconfig', '_sysconfigdata_m_linux_x86_64-linux-gnu', 'types', 'functools', '_functools', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'weakref', 'collections.abc', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'mpl_toolkits', 'zope', 'sitecustomize', 'apport_python_hook', 'runpy', 'pkgutil', 'ipykernel', 'ipykernel._version', 'ipykernel.connect', '__future__', 'json', 'json.decoder', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'json.scanner', '_json', 'json.encoder', 'subprocess', 'time', 'signal', '_posixsubprocess', 'select', 'selectors', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', 'IPython', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'IPython.core.application', 'atexit', 'copy', 'glob', 'fnmatch', 'logging', 'string', '_string', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'traitlets', 'traitlets.traitlets', 'inspect', 'ast', '_ast', 'dis', 'opcode', '_opcode', 'six', 'struct', '_struct', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'ipython_genutils', 'ipython_genutils._version', 'ipython_genutils.py3compat', 'ipython_genutils.encoding', 'locale', 'platform', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets._version', 'traitlets.config', 'traitlets.config.application', 'decorator', 'traitlets.config.configurable', 'traitlets.config.loader', 'argparse', 'textwrap', 'gettext', 'ipython_genutils.path', 'random', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'ipython_genutils.text', 'ipython_genutils.importstring', 'IPython.core.crashhandler', 'pprint', 'IPython.core.ultratb', 'pydoc', 'urllib', 'urllib.parse', 'IPython.core.debugger', 'bdb', 'IPython.utils', 'IPython.utils.PyColorize', 'IPython.utils.coloransi', 'IPython.utils.ipstruct', 'IPython.utils.colorable', 'pygments', 'IPython.utils.py3compat', 'IPython.utils.encoding', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'pdb', 'cmd', 'code', 'codeop', 'IPython.core.display_trap', 'IPython.utils.path', 'IPython.utils.process', 'IPython.utils._process_posix', 'pexpect', 'pexpect.exceptions', 'pexpect.utils', 'pexpect.expect', 'pexpect.pty_spawn', 'pty', 'tty', 'termios', 'ptyprocess', 'ptyprocess.ptyprocess', 'fcntl', 'resource', 'ptyprocess.util', 'pexpect.spawnbase', 'pexpect.run', 'IPython.utils._process_common', 'shlex', 'IPython.utils.decorators', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.utils.sysinfo', 'IPython.utils._sysinfo', 'IPython.core.profiledir', 'IPython.paths', 'tempfile', 'IPython.utils.importstring', 'IPython.terminal', 'IPython.terminal.embed', 'IPython.core.compilerop', 'IPython.core.magic_arguments', 'IPython.core.error', 'IPython.utils.text', 'pathlib', 'ntpath', 'IPython.core.magic', 'getopt', 'IPython.core.oinspect', 'typing', 'typing.io', 'typing.re', 'IPython.core.page', 'IPython.core.display', 'binascii', 'mimetypes', 'IPython.lib', 'IPython.lib.security', 'getpass', 'IPython.lib.pretty', 'datetime', '_datetime', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers.python', 'pygments.lexer', 'pygments.filter', 'pygments.filters', 'pygments.token', 'pygments.regexopt', 'pygments.unistring', 'pygments.formatters', 'pygments.formatters._mapping', 'pygments.formatters.html', 'pygments.formatter', 'pygments.styles', 'IPython.core.inputtransformer2', 'IPython.core.interactiveshell', 'pickleshare', 'pickle', '_compat_pickle', '_pickle', 'IPython.core.prefilter', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.alias', 'IPython.core.builtin_trap', 'IPython.core.events', 'backcall', 'backcall.backcall', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.core.formatters', 'IPython.utils.sentinel', 'IPython.core.history', 'sqlite3', 'sqlite3.dbapi2', '_sqlite3', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'IPython.display', 'IPython.lib.display', 'html', 'html.entities', 'IPython.utils.io', 'IPython.utils.capture', 'IPython.utils.strdispatch', 'IPython.core.hooks', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.terminal.interactiveshell', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'concurrent.futures.process', 'queue', 'multiprocessing', 'multiprocessing.context', 'multiprocessing.process', 'multiprocessing.reduction', 'socket', '_socket', 'array', '__mp_main__', 'multiprocessing.connection', '_multiprocessing', 'multiprocessing.util', 'concurrent.futures.thread', 'asyncio.compat', 'asyncio.coroutines', 'asyncio.constants', 'asyncio.events', 'asyncio.base_futures', 'asyncio.log', 'asyncio.futures', 'asyncio.base_tasks', '_asyncio', 'asyncio.tasks', 'asyncio.locks', 'asyncio.protocols', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.transports', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'ssl', 'ipaddress', '_ssl', 'base64', 'asyncio.sslproto', 'prompt_toolkit', 'prompt_toolkit.application', 'prompt_toolkit.application.application', 'prompt_toolkit.buffer', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop', 'prompt_toolkit.eventloop.async_generator', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.dummy_contextvars', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.utils', 'wcwidth', 'wcwidth.wcwidth', 'wcwidth.table_wide', 'wcwidth.table_zero', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.eventloop.async_context_manager', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.document', 'prompt_toolkit.clipboard', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.filters', 'prompt_toolkit.filters.app', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.completion', 'prompt_toolkit.completion.base', 'prompt_toolkit.formatted_text', 'prompt_toolkit.formatted_text.ansi', 'prompt_toolkit.output', 'prompt_toolkit.output.base', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.pygments', 'prompt_toolkit.styles.style_transformation', 'colorsys', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.defaults', 'prompt_toolkit.patch_stdout', 'prompt_toolkit.output.vt100', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.html', 'xml', 'xml.dom', 'xml.dom.domreg', 'xml.dom.minidom', 'xml.dom.minicompat', 'xml.dom.xmlbuilder', 'xml.dom.NodeFilter', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.history', 'prompt_toolkit.search', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.validation', 'prompt_toolkit.input', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.layout', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.controls', 'prompt_toolkit.lexers', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.dummy', 'prompt_toolkit.shortcuts', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.utils', 'pygments.style', 'IPython.terminal.debugger', 'IPython.core.completer', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'jedi', 'jedi.api', 'parso', 'parso.parser', 'parso.tree', 'parso._compatibility', 'parso.utils', 'parso.pgen2', 'parso.pgen2.generator', 'parso.pgen2.grammar_parser', 'parso.python', 'parso.python.tokenize', 'parso.python.token', 'parso.grammar', 'parso.python.diff', 'difflib', 'parso.python.parser', 'parso.python.tree', 'parso.python.prefix', 'parso.cache', 'gc', 'parso.python.errors', 'parso.normalizer', 'parso.python.pep8', 'parso.file_io', 'jedi._compatibility', 'jedi.file_io', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.api.classes', 'jedi.inference', 'jedi.inference.imports', 'jedi.inference.sys_path', 'jedi.inference.cache', 'jedi.inference.base_value', 'jedi.common', 'jedi.common.value', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.common.utils', 'jedi.inference.compiled', 'jedi.inference.compiled.value', 'jedi.inference.filters', 'jedi.inference.flow_analysis', 'jedi.inference.recursion', 'jedi.inference.names', 'jedi.inference.docstrings', 'jedi.inference.lazy_value', 'jedi.plugins', 'jedi.inference.compiled.access', 'jedi.inference.compiled.getattr_static', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.gradual.typeshed', 'jedi.inference.gradual.stub_value', 'jedi.inference.value', 'jedi.inference.value.module', 'jedi.inference.value.klass', 'jedi.inference.arguments', 'jedi.inference.value.iterable', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.function', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.instance', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.syntax_tree', 'jedi.inference.gradual.annotation', 'jedi.inference.param', 'jedi.inference.value.decorator', 'jedi.inference.gradual.conversion', 'jedi.api.keywords', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.interpreter', 'jedi.inference.compiled.mixed', 'jedi.api.completion', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.environment', 'filecmp', 'jedi.inference.compiled.subprocess', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.api.project', 'jedi.inference.references', 'jedi.inference.gradual.utils', 'jedi.plugins.registry', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'IPython.terminal.ptutils', 'IPython.terminal.shortcuts', 'IPython.terminal.magics', 'IPython.lib.clipboard', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.ipapp', 'IPython.core.magics', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'IPython.core.magics.code', 'urllib.request', 'email', 'http', 'http.client', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'urllib.error', 'urllib.response', 'IPython.core.magics.config', 'IPython.core.magics.display', 'IPython.core.magics.execution', 'timeit', 'cProfile', '_lsprof', 'profile', 'optparse', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.magics.pylab', 'IPython.core.pylabtools', 'IPython.core.magics.script', 'IPython.lib.backgroundjobs', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.utils.frame', 'jupyter_client', 'jupyter_client._version', 'jupyter_client.connect', 'zmq', 'ctypes', '_ctypes', 'ctypes._endian', 'zmq.backend', 'zmq.backend.select', 'zmq.backend.cython', 'zmq.backend.cython.constants', 'cython_runtime', 'zmq.backend.cython.error', '_cython_0_29_15', 'zmq.backend.cython.message', 'zmq.error', 'zmq.backend.cython.context', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.sugar', 'zmq.sugar.constants', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.context', 'zmq.sugar.attrsettr', 'zmq.sugar.socket', 'zmq.sugar.poll', 'zmq.utils.jsonapi', 'zmq.utils.strtypes', 'simplejson', 'decimal', 'numbers', '_decimal', 'simplejson.errors', 'simplejson.raw_json', 'simplejson.decoder', 'simplejson.compat', 'simplejson.scanner', 'simplejson._speedups', 'simplejson.encoder', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'jupyter_client.localinterfaces', 'jupyter_core', 'jupyter_core.version', 'jupyter_core.paths', 'distutils', 'distutils.util', 'distutils.errors', 'distutils.dep_util', 'distutils.spawn', 'distutils.debug', 'distutils.log', 'jupyter_client.launcher', 'traitlets.log', 'jupyter_client.client', 'jupyter_client.channels', 'jupyter_client.channelsabc', 'jupyter_client.clientabc', 'jupyter_client.manager', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.blocking', 'jupyter_client.blocking.client', 'jupyter_client.blocking.channels', 'jupyter_client.asynchronous', 'jupyter_client.asynchronous.client', 'zmq.asyncio', 'zmq._future', 'jupyter_client.asynchronous.channels', 'jupyter_client.multikernelmanager', 'uuid', 'ctypes.util', 'ipykernel.kernelapp', 'tornado', 'tornado.ioloop', 'tornado.concurrent', 'tornado.log', 'logging.handlers', 'tornado.escape', 'tornado.util', 'tornado.speedups', 'curses', '_curses', 'zmq.eventloop', 'zmq.eventloop.ioloop', 'tornado.platform', 'tornado.platform.asyncio', 'tornado.gen', 'zmq.eventloop.zmqstream', 'ipykernel.iostream', 'imp', 'jupyter_client.session', 'hmac', 'jupyter_client.jsonutil', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.parser.isoparser', '_strptime', 'jupyter_client.adapter', 'ipykernel.heartbeat', 'ipykernel.ipkernel', 'IPython.utils.tokenutil', 'ipykernel.comm', 'ipykernel.comm.manager', 'ipykernel.comm.comm', 'ipykernel.kernelbase', 'tornado.queues', 'tornado.locks', 'ipykernel.jsonutil', 'ipykernel.zmqshell', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.eventloops', 'distutils.version', 'ipykernel.parentpoller', 'netifaces', 'faulthandler', 'ipykernel.datapub', 'ipykernel.serialize', 'ipykernel.pickleutil', 'ipykernel.codeutil', 'IPython.core.completerlib', 'storemagic', 'mphys', 'cdflib', 'cdflib.cdfread', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'numpy.core', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core._asarray', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'numpy.random._bit_generator', 'numpy.random._common', 'secrets', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'gzip', 'cdflib.epochs', 'csv', '_csv', 'cdflib.cdfwrite', 'pandas', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas.compat.numpy', 'pandas._libs', 'pandas._libs.tslibs', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.c_timestamp', 'pandas._libs.tslibs.nattype', '_cython_0_29_13', 'pandas._libs.missing', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.ops_dispatch', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.ccalendar', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.frequencies', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.resolution', 'pandas._libs.hashtable', 'pandas._libs.lib', 'fractions', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas._libs.interval', 'pandas._libs.algos', 'pandas._typing', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas._libs.properties', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.common', 'pandas.core.construction', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.nanops', 'pandas.core.arrays.masked', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.base', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.tseries.offsets', 'dateutil.easter', 'pandas.core.arrays._ranges', 'pandas.core.arrays.integer', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.indexes.frozen', 'pandas.io.formats.printing', 'pandas.core.strings', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas.core.frame', 'pandas.core.generic', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.writers', 'pandas._libs.internals', 'pandas.core.internals.managers', 'pandas.core.internals.concat', 'pandas.io.formats.format', 'pandas.io.common', 'mmap', 'zipfile', 'pandas.core.internals.construction', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.window.common', 'pandas.core.groupby.base', 'pandas.core.window.rolling', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.expanding', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.ops', 'pandas._libs.reduction', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape', 'pandas.core.reshape.api', 'pandas.core.reshape.concat', 'pandas.core.reshape.melt', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.util', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._xlrd', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlsxwriter', 'pandas._libs.json', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'pandas._version', 'progress', 'progress.bar', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib.docstring', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']

[2020-04-15 16:41:16,762: Fname - __init__.py: Function - wrapper: DEBUG]
CACHEDIR=/home/james/.cache/matplotlib

[2020-04-15 16:41:16,764: Fname - font_manager.py: Function - <module>: DEBUG]
Using fontManager instance from /home/james/.cache/matplotlib/fontlist-v310.json

[2020-04-15 16:41:16,839: Fname - pyplot.py: Function - switch_backend: DEBUG]
Loaded backend module://ipykernel.pylab.backend_inline version unknown.

[2020-04-15 16:41:16,842: Fname - pyplot.py: Function - switch_backend: DEBUG]
Loaded backend module://ipykernel.pylab.backend_inline version unknown.

[2020-04-15 16:43:32,000: Fname - mphys.py: Function - info: INFO]
Timing code

[2020-04-15 16:43:32,001: Fname - mphys.py: Function - info: INFO]
Timing code completed in 0.00s

[2020-04-15 16:43:59,915: Fname - mphys.py: Function - info: INFO]
Timing code

[2020-04-15 16:44:00,265: Fname - mphys.py: Function - info: INFO]
Timing PGP

[2020-04-15 16:44:00,266: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20020701_V47.cdf

[2020-04-15 16:44:00,369: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20020801_V47.cdf

[2020-04-15 16:44:00,448: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20020901_V45.cdf

[2020-04-15 16:44:00,526: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20021001_V47.cdf

[2020-04-15 16:44:00,606: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20021101_V49.cdf

[2020-04-15 16:44:00,683: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20021201_V47.cdf

[2020-04-15 16:44:00,798: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20030701_V60.cdf

[2020-04-15 16:44:00,878: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20030801_V58.cdf

[2020-04-15 16:44:00,956: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20030901_V52.cdf

[2020-04-15 16:44:01,033: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20031001_V52.cdf

[2020-04-15 16:44:01,112: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20031101_V49.cdf

[2020-04-15 16:44:01,191: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20031201_V52.cdf

[2020-04-15 16:44:01,273: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20040701_V41.cdf

[2020-04-15 16:44:01,352: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20040801_V41.cdf

[2020-04-15 16:44:01,434: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20040901_V42.cdf

[2020-04-15 16:44:01,514: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20041001_V42.cdf

[2020-04-15 16:44:01,602: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20041101_V41.cdf

[2020-04-15 16:44:01,721: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20041201_V41.cdf

[2020-04-15 16:44:01,803: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20050701_V34.cdf

[2020-04-15 16:44:01,884: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20050801_V33.cdf

[2020-04-15 16:44:01,965: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20050901_V34.cdf

[2020-04-15 16:44:02,044: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20051001_V35.cdf

[2020-04-15 16:44:02,125: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20051101_V34.cdf

[2020-04-15 16:44:02,204: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20051201_V33.cdf

[2020-04-15 16:44:02,286: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20060701_V34.cdf

[2020-04-15 16:44:02,366: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20060801_V33.cdf

[2020-04-15 16:44:02,448: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20060901_V32.cdf

[2020-04-15 16:44:02,527: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20061001_V32.cdf

[2020-04-15 16:44:02,644: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20061101_V33.cdf

[2020-04-15 16:44:02,724: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20061201_V33.cdf

[2020-04-15 16:44:02,806: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20070701_V32.cdf

[2020-04-15 16:44:02,886: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20070801_V31.cdf

[2020-04-15 16:44:02,967: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20070901_V30.cdf

[2020-04-15 16:44:03,047: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20071001_V33.cdf

[2020-04-15 16:44:03,129: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20071101_V31.cdf

[2020-04-15 16:44:03,210: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20071201_V27.cdf

[2020-04-15 16:44:03,293: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20080701_V31.cdf

[2020-04-15 16:44:03,375: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20080801_V31.cdf

[2020-04-15 16:44:03,458: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20080901_V30.cdf

[2020-04-15 16:44:03,573: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20081001_V32.cdf

[2020-04-15 16:44:03,660: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20081101_V28.cdf

[2020-04-15 16:44:03,741: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20081201_V26.cdf

[2020-04-15 16:44:03,824: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20090701_V29.cdf

[2020-04-15 16:44:03,906: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20090801_V29.cdf

[2020-04-15 16:44:03,987: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20090901_V25.cdf

[2020-04-15 16:44:04,067: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20091001_V28.cdf

[2020-04-15 16:44:04,148: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20091101_V30.cdf

[2020-04-15 16:44:04,228: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20091201_V28.cdf

[2020-04-15 16:44:04,312: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20100701_V22.cdf

[2020-04-15 16:44:04,394: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20100801_V22.cdf

[2020-04-15 16:44:04,512: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20100901_V24.cdf

[2020-04-15 16:44:04,591: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20101001_V25.cdf

[2020-04-15 16:44:04,673: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20101101_V24.cdf

[2020-04-15 16:44:04,755: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20101201_V25.cdf

[2020-04-15 16:44:04,844: Fname - mphys.py: Function - info: INFO]
Timing PGP completed in 4.58s

[2020-04-15 16:44:04,946: Fname - mphys.py: Function - info: INFO]
Timing code completed in 5.03s

[2020-04-15 16:45:35,618: Fname - mphys.py: Function - info: INFO]
Timing code

[2020-04-15 16:45:35,955: Fname - mphys.py: Function - info: INFO]
Timing PGP

[2020-04-15 16:45:35,955: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20020701_V47.cdf

[2020-04-15 16:45:36,060: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20020801_V47.cdf

[2020-04-15 16:45:36,140: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20020901_V45.cdf

[2020-04-15 16:45:36,222: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20021001_V47.cdf

[2020-04-15 16:45:36,300: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20021101_V49.cdf

[2020-04-15 16:45:36,376: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20021201_V47.cdf

[2020-04-15 16:45:36,490: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20030701_V60.cdf

[2020-04-15 16:45:36,569: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20030801_V58.cdf

[2020-04-15 16:45:36,648: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20030901_V52.cdf

[2020-04-15 16:45:36,724: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20031001_V52.cdf

[2020-04-15 16:45:36,804: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20031101_V49.cdf

[2020-04-15 16:45:36,882: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20031201_V52.cdf

[2020-04-15 16:45:36,962: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20040701_V41.cdf

[2020-04-15 16:45:37,040: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20040801_V41.cdf

[2020-04-15 16:45:37,119: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20040901_V42.cdf

[2020-04-15 16:45:37,195: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20041001_V42.cdf

[2020-04-15 16:45:37,276: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20041101_V41.cdf

[2020-04-15 16:45:37,390: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20041201_V41.cdf

[2020-04-15 16:45:37,472: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20050701_V34.cdf

[2020-04-15 16:45:37,551: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20050801_V33.cdf

[2020-04-15 16:45:37,632: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20050901_V34.cdf

[2020-04-15 16:45:37,710: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20051001_V35.cdf

[2020-04-15 16:45:37,789: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20051101_V34.cdf

[2020-04-15 16:45:37,874: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20051201_V33.cdf

[2020-04-15 16:45:37,955: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20060701_V34.cdf

[2020-04-15 16:45:38,035: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20060801_V33.cdf

[2020-04-15 16:45:38,115: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20060901_V32.cdf

[2020-04-15 16:45:38,193: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20061001_V32.cdf

[2020-04-15 16:45:38,308: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20061101_V33.cdf

[2020-04-15 16:45:38,386: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20061201_V33.cdf

[2020-04-15 16:45:38,467: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20070701_V32.cdf

[2020-04-15 16:45:38,547: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20070801_V31.cdf

[2020-04-15 16:45:38,627: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20070901_V30.cdf

[2020-04-15 16:45:38,705: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20071001_V33.cdf

[2020-04-15 16:45:38,784: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20071101_V31.cdf

[2020-04-15 16:45:38,863: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20071201_V27.cdf

[2020-04-15 16:45:38,944: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20080701_V31.cdf

[2020-04-15 16:45:39,023: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20080801_V31.cdf

[2020-04-15 16:45:39,103: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20080901_V30.cdf

[2020-04-15 16:45:39,216: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20081001_V32.cdf

[2020-04-15 16:45:39,296: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20081101_V28.cdf

[2020-04-15 16:45:39,374: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20081201_V26.cdf

[2020-04-15 16:45:39,455: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20090701_V29.cdf

[2020-04-15 16:45:39,535: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20090801_V29.cdf

[2020-04-15 16:45:39,616: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20090901_V25.cdf

[2020-04-15 16:45:39,695: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20091001_V28.cdf

[2020-04-15 16:45:39,776: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20091101_V30.cdf

[2020-04-15 16:45:39,854: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20091201_V28.cdf

[2020-04-15 16:45:39,935: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20100701_V22.cdf

[2020-04-15 16:45:40,016: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20100801_V22.cdf

[2020-04-15 16:45:40,132: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20100901_V24.cdf

[2020-04-15 16:45:40,211: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20101001_V25.cdf

[2020-04-15 16:45:40,291: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20101101_V24.cdf

[2020-04-15 16:45:40,371: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20101201_V25.cdf

[2020-04-15 16:45:40,452: Fname - mphys.py: Function - info: INFO]
Timing PGP completed in 4.50s

[2020-04-15 16:45:40,559: Fname - mphys.py: Function - info: INFO]
Timing code completed in 4.94s

[2020-04-15 16:45:40,590: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.

[2020-04-15 16:45:40,591: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,591: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335

[2020-04-15 16:45:40,591: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05

[2020-04-15 16:45:40,591: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,591: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,591: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,591: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05

[2020-04-15 16:45:40,591: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,591: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,591: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,592: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,592: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335

[2020-04-15 16:45:40,592: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,592: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05

[2020-04-15 16:45:40,592: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,592: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,592: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,592: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,592: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,592: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[2020-04-15 16:45:40,592: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05

[2020-04-15 16:45:40,592: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,592: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,592: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996

[2020-04-15 16:45:40,592: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,592: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05

[2020-04-15 16:45:40,592: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,593: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,593: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,593: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335

[2020-04-15 16:45:40,593: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,593: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,593: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05

[2020-04-15 16:45:40,593: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,593: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,593: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[2020-04-15 16:45:40,593: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,593: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,593: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,593: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Naskh Arabic UI' (NotoNaskhArabicUI-Regular.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,593: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,593: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[2020-04-15 16:45:40,593: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Naskh Arabic' (NotoNaskhArabic-Regular.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,593: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Serif Armenian' (NotoSerifArmenian-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,594: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,594: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,594: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Brahmi' (NotoSansBrahmi-Regular.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,594: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[2020-04-15 16:45:40,594: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Myanmar' (NotoSansMyanmar-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,594: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,594: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Serif Thai' (NotoSerifThai-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,594: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,594: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,594: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Serif Armenian' (NotoSerifArmenian-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,594: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Thaana' (NotoSansThaana-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,594: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Gujarati' (NotoSansGujarati-Regular.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,594: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Cuneiform' (NotoSansCuneiform-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,594: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,594: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Linear B' (NotoSansLinearB-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,594: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed.ttf) normal normal 400 condensed>) = 10.25

[2020-04-15 16:45:40,594: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,594: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Balinese' (NotoSansBalinese-Regular.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,595: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,595: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Dyuthi' (Dyuthi.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,595: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Naskh Arabic' (NotoNaskhArabic-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,595: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Serif Tamil' (NotoSerifTamil-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,595: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,595: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,595: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Javanese' (NotoSansJavanese-Regular.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,595: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Khmer' (NotoSansKhmer-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,595: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Devanagari UI' (NotoSansDevanagariUI-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,595: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Lato' (Lato-Italic.ttf) italic normal 400 normal>) = 11.05

[2020-04-15 16:45:40,595: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Serif' (NotoSerif-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,595: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,595: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Bengali UI' (NotoSansBengaliUI-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,595: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,595: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,595: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Lato' (Lato-Thin.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,595: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Myanmar UI' (NotoSansMyanmarUI-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,596: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Bengali' (NotoSansBengali-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,596: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05

[2020-04-15 16:45:40,596: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05

[2020-04-15 16:45:40,596: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,596: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Old Italic' (NotoSansOldItalic-Regular.ttf) italic normal regular normal>) = 11.05

[2020-04-15 16:45:40,596: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Adlam Unjoined' (NotoSansAdlamUnjoined-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,596: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Samaritan' (NotoSansSamaritan-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,596: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,596: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,596: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Armenian' (NotoSansArmenian-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,596: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,596: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Malayalam' (NotoSansMalayalam-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,596: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Devanagari UI' (NotoSansDevanagariUI-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,596: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[2020-04-15 16:45:40,596: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,596: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,596: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Lycian' (NotoSansLycian-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,597: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Hack' (Hack-Italic.ttf) italic normal 400 normal>) = 11.05

[2020-04-15 16:45:40,597: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Keraleeyam' (Keraleeyam.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,597: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Serif Devanagari' (NotoSerifDevanagari-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,597: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[2020-04-15 16:45:40,597: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,597: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Cham' (NotoSansCham-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,597: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Lao' (NotoSansLao-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,597: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Kaithi' (NotoSansKaithi-Regular.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,597: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Lao' (NotoSansLao-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,597: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,597: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Serif Sinhala' (NotoSerifSinhala-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,597: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'FontAwesome' (fontawesome-webfont.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,597: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Khmer' (NotoSansKhmer-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,597: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Oriya UI' (NotoSansOriyaUI-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,597: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,597: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Meetei Mayek' (NotoSansMeeteiMayek-Regular.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,597: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,598: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Lato' (Lato-SemiboldItalic.ttf) italic normal semibold normal>) = 11.24

[2020-04-15 16:45:40,598: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Gurmukhi' (NotoSansGurmukhi-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,598: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Tagalog' (NotoSansTagalog-Regular.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,598: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,598: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Lao UI' (NotoSansLaoUI-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,598: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,598: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Cherokee' (NotoSansCherokee-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,598: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal medium normal>) = 10.145

[2020-04-15 16:45:40,598: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Hanunoo' (NotoSansHanunoo-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,598: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Oriya UI' (NotoSansOriyaUI-Regular.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,598: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,598: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Hebrew' (NotoSansHebrew-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,598: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,598: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25

[2020-04-15 16:45:40,598: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[2020-04-15 16:45:40,598: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Cypriot' (NotoSansCypriot-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,598: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-R.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,599: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05

[2020-04-15 16:45:40,599: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05

[2020-04-15 16:45:40,599: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,599: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Sinhala UI' (NotoSansSinhalaUI-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,599: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Tamil' (NotoSansTamil-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,599: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Nastaliq Urdu' (NotoNastaliqUrdu-Regular.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,599: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed.ttf) normal normal 400 condensed>) = 0.25

[2020-04-15 16:45:40,599: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25

[2020-04-15 16:45:40,599: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,599: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Telugu' (NotoSansTelugu-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,599: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Serif Telugu' (NotoSerifTelugu-Regular.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,599: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,599: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[2020-04-15 16:45:40,599: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans' (NotoSans-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,599: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05

[2020-04-15 16:45:40,599: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Lato' (Lato-Light.ttf) normal normal light normal>) = 10.24

[2020-04-15 16:45:40,599: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Serif Lao' (NotoSerifLao-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,600: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,600: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Tifinagh' (NotoSansTifinagh-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,600: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Serif Myanmar' (NotoSerifMyanmar-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,600: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,600: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,600: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Tai Viet' (NotoSansTaiViet-Regular.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,600: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05

[2020-04-15 16:45:40,600: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Lato' (Lato-MediumItalic.ttf) italic normal medium normal>) = 11.145

[2020-04-15 16:45:40,600: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335

[2020-04-15 16:45:40,600: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,600: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,600: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,600: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Khmer UI' (NotoSansKhmerUI-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,600: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Telugu UI' (NotoSansTeluguUI-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,600: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[2020-04-15 16:45:40,600: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,600: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Serif Telugu' (NotoSerifTelugu-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,601: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335

[2020-04-15 16:45:40,601: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Lydian' (NotoSansLydian-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,601: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[2020-04-15 16:45:40,601: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Serif Malayalam' (NotoSerifMalayalam-Regular.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,601: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,601: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Ethiopic' (NotoSansEthiopic-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,601: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Syriac Estrangela' (NotoSansSyriacEstrangela-Regular.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,601: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Hack' (Hack-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,601: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,601: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[2020-04-15 16:45:40,601: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Lato' (Lato-Semibold.ttf) normal normal semibold normal>) = 10.24

[2020-04-15 16:45:40,601: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Serif Georgian' (NotoSerifGeorgian-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,601: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,601: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Serif Sinhala' (NotoSerifSinhala-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,601: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Lato' (Lato-ThinItalic.ttf) italic normal 400 normal>) = 11.05

[2020-04-15 16:45:40,601: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Serif Bengali' (NotoSerifBengali-Regular.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,601: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,602: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Oblique.ttf) oblique normal 400 condensed>) = 1.25

[2020-04-15 16:45:40,602: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Tai Tham' (NotoSansTaiTham-Regular.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,602: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Arabic UI' (NotoSansArabicUI-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,602: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Devanagari' (NotoSansDevanagari-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,602: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Kufi Arabic' (NotoKufiArabic-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,602: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Vai' (NotoSansVai-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,602: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[2020-04-15 16:45:40,602: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Canadian Aboriginal' (NotoSansCanadianAboriginal-Regular.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,602: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Serif Gujarati' (NotoSerifGujarati-Regular.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,602: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,602: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,602: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Egyptian Hieroglyphs' (NotoSansEgyptianHieroglyphs-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,602: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 400 normal>) = 11.05

[2020-04-15 16:45:40,602: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Meera' (Meera.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,602: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Symbols2' (NotoSansSymbols2-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,602: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Thaana' (NotoSansThaana-Regular.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,603: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,603: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,603: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05

[2020-04-15 16:45:40,603: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Georgian' (NotoSansGeorgian-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,603: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Cherokee' (NotoSansCherokee-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,603: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Hack' (Hack-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[2020-04-15 16:45:40,603: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Lisu' (NotoSansLisu-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,603: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Kayah Li' (NotoSansKayahLi-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,603: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 700 normal>) = 11.335

[2020-04-15 16:45:40,603: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Display' (NotoSansDisplay-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,603: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Syriac Eastern' (NotoSansSyriacEastern-Regular.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,603: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Devanagari' (NotoSansDevanagari-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,603: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,603: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans NKo' (NotoSansNKo-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,603: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,603: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Thai UI' (NotoSansThaiUI-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,603: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Lao UI' (NotoSansLaoUI-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,603: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,604: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,604: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,604: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Malayalam UI' (NotoSansMalayalamUI-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,604: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal light normal>) = 11.24

[2020-04-15 16:45:40,604: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[2020-04-15 16:45:40,604: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,604: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,604: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05

[2020-04-15 16:45:40,604: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Serif Display' (NotoSerifDisplay-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,604: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Kannada' (NotoSansKannada-Regular.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,604: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,604: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Khmer UI' (NotoSansKhmerUI-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,604: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,604: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans New Tai Lue' (NotoSansNewTaiLue-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,604: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,604: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Oxygen-Sans' (Oxygen-Sans-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,604: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal bold normal>) = 10.335

[2020-04-15 16:45:40,605: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,605: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Lato' (Lato-HairlineItalic.ttf) italic normal 400 normal>) = 11.05

[2020-04-15 16:45:40,605: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Uroob' (Uroob.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,605: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Serif Bengali' (NotoSerifBengali-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,605: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05

[2020-04-15 16:45:40,605: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535

[2020-04-15 16:45:40,605: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Display' (NotoSansDisplay-Italic.ttf) italic normal 400 normal>) = 11.05

[2020-04-15 16:45:40,605: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Coptic' (NotoSansCoptic-Regular.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,605: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05

[2020-04-15 16:45:40,605: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'DejaVu Sans' (DejaVuSans-ExtraLight.ttf) normal normal light normal>) = 0.24

[2020-04-15 16:45:40,605: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[2020-04-15 16:45:40,605: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Old South Arabian' (NotoSansOldSouthArabian-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,605: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,605: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Gothic' (NotoSansGothic-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,605: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[2020-04-15 16:45:40,605: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,605: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,606: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,606: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05

[2020-04-15 16:45:40,606: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Lato' (Lato-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,606: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal light normal>) = 11.24

[2020-04-15 16:45:40,606: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Tai Le' (NotoSansTaiLe-Regular.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,606: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Gurmukhi' (NotoSansGurmukhi-Regular.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,606: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Sundanese' (NotoSansSundanese-Regular.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,606: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,606: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Lato' (Lato-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[2020-04-15 16:45:40,606: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Bold.ttf) normal normal 700 condensed>) = 0.5349999999999999

[2020-04-15 16:45:40,606: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Telugu' (NotoSansTelugu-Regular.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,606: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Syriac Western' (NotoSansSyriacWestern-Regular.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,606: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Lepcha' (NotoSansLepcha-Regular.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,607: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Mono' (NotoSansMono-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,607: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,607: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'PowerlineSymbols' (PowerlineSymbols.otf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,607: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,607: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,607: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Bamum' (NotoSansBamum-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,607: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Arabic' (NotoSansArabic-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,607: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,607: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05

[2020-04-15 16:45:40,607: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Oxygen-Sans' (Oxygen-Sans.ttf) normal normal book normal>) = 10.05

[2020-04-15 16:45:40,607: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Hebrew' (NotoSansHebrew-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,607: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,607: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Serif Hebrew' (NotoSerifHebrew-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,608: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Serif Ethiopic' (NotoSerifEthiopic-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,608: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Gujarati UI' (NotoSansGujaratiUI-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,608: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[2020-04-15 16:45:40,608: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 400 normal>) = 11.05

[2020-04-15 16:45:40,608: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Mono' (NotoSansMono-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,608: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,608: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal light normal>) = 10.24

[2020-04-15 16:45:40,608: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Runic' (NotoSansRunic-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,608: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Gurmukhi UI' (NotoSansGurmukhiUI-Regular.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,608: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Sinhala' (NotoSansSinhala-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,608: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Arabic' (NotoSansArabic-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,608: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Serif Display' (NotoSerifDisplay-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,609: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Shavian' (NotoSansShavian-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,609: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,609: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 400 normal>) = 11.05

[2020-04-15 16:45:40,609: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996

[2020-04-15 16:45:40,609: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,609: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,609: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,609: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal normal normal>) = 10.0

[2020-04-15 16:45:40,609: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Buhid' (NotoSansBuhid-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,609: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,609: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Malayalam UI' (NotoSansMalayalamUI-Regular.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,609: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Lato' (Lato-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,610: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Italic.ttf) italic normal 400 condensed>) = 11.25

[2020-04-15 16:45:40,610: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,610: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'RaghuMalayalam' (RaghuMalayalamSans-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,610: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Adlam' (NotoSansAdlam-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,610: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,610: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Chilanka' (Chilanka-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,610: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Karumbi' (Karumbi.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,610: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Lato' (Lato-Heavy.ttf) normal normal heavy normal>) = 10.43

[2020-04-15 16:45:40,610: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,610: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,610: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Carian' (NotoSansCarian-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,610: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05

[2020-04-15 16:45:40,610: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Tagbanwa' (NotoSansTagbanwa-Regular.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,611: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,611: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,611: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Serif Kannada' (NotoSerifKannada-Regular.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,611: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Tamil UI' (NotoSansTamilUI-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,611: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,611: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,611: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05

[2020-04-15 16:45:40,611: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,611: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans' (NotoSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[2020-04-15 16:45:40,611: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Serif Display' (NotoSerifDisplay-Italic.ttf) italic normal 400 normal>) = 11.05

[2020-04-15 16:45:40,611: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Deseret' (NotoSansDeseret-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,611: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Lato' (Lato-Black.ttf) normal normal black normal>) = 10.525

[2020-04-15 16:45:40,611: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,612: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[2020-04-15 16:45:40,612: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Ethiopic' (NotoSansEthiopic-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,612: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Osage' (NotoSansOsage-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,612: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Limbu' (NotoSansLimbu-Regular.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,612: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-BoldOblique.ttf) oblique normal 700 condensed>) = 1.535

[2020-04-15 16:45:40,612: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Lato' (Lato-BlackItalic.ttf) italic normal black normal>) = 11.525

[2020-04-15 16:45:40,612: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Serif Kannada' (NotoSerifKannada-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,612: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Phoenician' (NotoSansPhoenician-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,612: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Georgian' (NotoSansGeorgian-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,612: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,612: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Tibetan' (NotoSansTibetan-Regular.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,612: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 700 normal>) = 11.335

[2020-04-15 16:45:40,612: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,612: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Serif Tamil' (NotoSerifTamil-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,613: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Sinhala' (NotoSansSinhala-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,613: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Serif Thai' (NotoSerifThai-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,613: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Malayalam' (NotoSansMalayalam-Regular.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,613: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,613: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05

[2020-04-15 16:45:40,613: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Serif Malayalam' (NotoSerifMalayalam-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,613: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Thai' (NotoSansThai-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,613: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,613: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05

[2020-04-15 16:45:40,613: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,613: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,613: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Yi' (NotoSansYi-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,613: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Sinhala UI' (NotoSansSinhalaUI-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,613: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Oriya' (NotoSansOriya-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,613: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335

[2020-04-15 16:45:40,613: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Telugu UI' (NotoSansTeluguUI-Regular.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,613: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05

[2020-04-15 16:45:40,613: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05

[2020-04-15 16:45:40,614: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Rejang' (NotoSansRejang-Regular.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,614: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans' (NotoSans-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,614: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[2020-04-15 16:45:40,614: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Oxygen Mono' (OxygenMono-Regular.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,614: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,614: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 400 normal>) = 11.05

[2020-04-15 16:45:40,614: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,614: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,614: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,614: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,614: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Bengali UI' (NotoSansBengaliUI-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,614: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal book normal>) = 10.05

[2020-04-15 16:45:40,614: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Serif Georgian' (NotoSerifGeorgian-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,614: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Tamil UI' (NotoSansTamilUI-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,614: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05

[2020-04-15 16:45:40,614: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Bold.ttf) normal normal 700 condensed>) = 10.535

[2020-04-15 16:45:40,614: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,614: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Kharoshthi' (NotoSansKharoshthi-Regular.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,614: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Display' (NotoSansDisplay-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,615: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Bengali' (NotoSansBengali-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,615: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[2020-04-15 16:45:40,615: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05

[2020-04-15 16:45:40,615: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal light normal>) = 10.24

[2020-04-15 16:45:40,615: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,615: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,615: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,615: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,615: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Kannada UI' (NotoSansKannadaUI-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,615: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Serif Khmer' (NotoSerifKhmer-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,615: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Avestan' (NotoSansAvestan-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,615: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal book normal>) = 10.05

[2020-04-15 16:45:40,615: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,615: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Serif Gujarati' (NotoSerifGujarati-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,615: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Mandaic' (NotoSansMandaic-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,615: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,615: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,616: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,616: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Imperial Aramaic' (NotoSansImperialAramaic-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,616: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,616: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Ugaritic' (NotoSansUgaritic-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,616: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Ol Chiki' (NotoSansOlChiki-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,616: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Kufi Arabic' (NotoKufiArabic-Regular.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,616: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Display' (NotoSansDisplay-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[2020-04-15 16:45:40,616: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Serif Khmer' (NotoSerifKhmer-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,616: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,616: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Syloti Nagri' (NotoSansSylotiNagri-Regular.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,616: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05

[2020-04-15 16:45:40,616: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,616: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,617: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,617: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Kannada' (NotoSansKannada-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,617: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Naskh Arabic UI' (NotoNaskhArabicUI-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,617: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,617: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,617: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335

[2020-04-15 16:45:40,617: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05

[2020-04-15 16:45:40,617: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Old Persian' (NotoSansOldPersian-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,617: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,617: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Serif' (NotoSerif-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,617: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,617: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Batak' (NotoSansBatak-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,617: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Buginese' (NotoSansBuginese-Regular.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,618: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,618: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Saurashtra' (NotoSansSaurashtra-Regular.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,618: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Mongolian' (NotoSansMongolian-Regular.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,618: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Inscriptional Parthian' (NotoSansInscriptionalParthian-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,618: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Hack' (Hack-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,618: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Kannada UI' (NotoSansKannadaUI-Regular.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,618: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Arabic UI' (NotoSansArabicUI-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,618: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Serif' (NotoSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[2020-04-15 16:45:40,618: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,618: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Lato' (Lato-LightItalic.ttf) italic normal light normal>) = 11.24

[2020-04-15 16:45:40,618: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,618: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,618: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Oriya' (NotoSansOriya-Regular.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,619: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Phags Pa' (NotoSansPhagsPa-Regular.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,619: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,619: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[2020-04-15 16:45:40,619: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,619: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[2020-04-15 16:45:40,619: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Serif Devanagari' (NotoSerifDevanagari-Regular.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,619: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,619: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Lato' (Lato-HeavyItalic.ttf) italic normal heavy normal>) = 11.43

[2020-04-15 16:45:40,619: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,619: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Symbols' (NotoSansSymbols-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,619: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535

[2020-04-15 16:45:40,619: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05

[2020-04-15 16:45:40,619: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,620: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Serif' (NotoSerif-Italic.ttf) italic normal 400 normal>) = 11.05

[2020-04-15 16:45:40,620: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-BoldItalic.ttf) italic normal 700 condensed>) = 11.535

[2020-04-15 16:45:40,620: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'DejaVu Math TeX Gyre' (DejaVuMathTeXGyre.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,620: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,620: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Myanmar' (NotoSansMyanmar-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,620: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Thai' (NotoSansThai-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,620: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Old Turkic' (NotoSansOldTurkic-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,620: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Symbols' (NotoSansSymbols-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,620: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[2020-04-15 16:45:40,620: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Serif Ethiopic' (NotoSerifEthiopic-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,620: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Cham' (NotoSansCham-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,620: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Lato' (Lato-Medium.ttf) normal normal medium normal>) = 10.145

[2020-04-15 16:45:40,620: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[2020-04-15 16:45:40,621: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Thai UI' (NotoSansThaiUI-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,621: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[2020-04-15 16:45:40,621: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Tibetan' (NotoSansTibetan-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,621: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Armenian' (NotoSansArmenian-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,621: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Serif Myanmar' (NotoSerifMyanmar-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,621: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Lato' (Lato-Hairline.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,621: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'FontAwesome' (FontAwesome.otf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,621: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05

[2020-04-15 16:45:40,621: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Glagolitic' (NotoSansGlagolitic-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,621: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 11.05

[2020-04-15 16:45:40,621: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,621: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Ogham' (NotoSansOgham-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,621: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,622: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Gujarati' (NotoSansGujarati-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,622: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Serif Lao' (NotoSerifLao-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,622: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Gurmukhi UI' (NotoSansGurmukhiUI-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,622: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,622: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Osmanya' (NotoSansOsmanya-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,622: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Chakma' (NotoSansChakma-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,622: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,622: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Serif Hebrew' (NotoSerifHebrew-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,622: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,622: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Anatolian Hieroglyphs' (NotoSansAnatolianHieroglyphs-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,622: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,622: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Serif Display' (NotoSerifDisplay-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[2020-04-15 16:45:40,622: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Gujarati UI' (NotoSansGujaratiUI-Regular.ttf) normal normal 400 normal>) = 10.05

[2020-04-15 16:45:40,622: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Myanmar UI' (NotoSansMyanmarUI-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,622: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans' (NotoSans-Italic.ttf) italic normal 400 normal>) = 11.05

[2020-04-15 16:45:40,622: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Tamil' (NotoSansTamil-Bold.ttf) normal normal 700 normal>) = 10.335

[2020-04-15 16:45:40,623: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25

[2020-04-15 16:45:40,623: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[2020-04-15 16:45:40,623: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Noto Sans Inscriptional Pahlavi' (NotoSansInscriptionalPahlavi-Regular.ttf) normal normal regular normal>) = 10.05

[2020-04-15 16:45:40,623: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05

[2020-04-15 16:45:40,623: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335

[2020-04-15 16:45:40,623: Fname - font_manager.py: Function - _findfont_cached: DEBUG]
findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('/home/james/.local/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.

[2020-04-15 16:45:56,984: Fname - mphys.py: Function - info: INFO]
Timing code

[2020-04-15 16:45:57,327: Fname - mphys.py: Function - info: INFO]
Timing PGP

[2020-04-15 16:45:57,328: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20020701_V47.cdf

[2020-04-15 16:45:57,434: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20020801_V47.cdf

[2020-04-15 16:45:57,514: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20020901_V45.cdf

[2020-04-15 16:45:57,592: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20021001_V47.cdf

[2020-04-15 16:45:57,709: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20021101_V49.cdf

[2020-04-15 16:45:57,787: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20021201_V47.cdf

[2020-04-15 16:45:57,867: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20030701_V60.cdf

[2020-04-15 16:45:57,945: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20030801_V58.cdf

[2020-04-15 16:45:58,025: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20030901_V52.cdf

[2020-04-15 16:45:58,103: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20031001_V52.cdf

[2020-04-15 16:45:58,186: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20031101_V49.cdf

[2020-04-15 16:45:58,263: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20031201_V52.cdf

[2020-04-15 16:45:58,344: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20040701_V41.cdf

[2020-04-15 16:45:58,424: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20040801_V41.cdf

[2020-04-15 16:45:58,504: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20040901_V42.cdf

[2020-04-15 16:45:58,580: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20041001_V42.cdf

[2020-04-15 16:45:58,696: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20041101_V41.cdf

[2020-04-15 16:45:58,774: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20041201_V41.cdf

[2020-04-15 16:45:58,853: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20050701_V34.cdf

[2020-04-15 16:45:58,933: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20050801_V33.cdf

[2020-04-15 16:45:59,012: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20050901_V34.cdf

[2020-04-15 16:45:59,088: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20051001_V35.cdf

[2020-04-15 16:45:59,166: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20051101_V34.cdf

[2020-04-15 16:45:59,243: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20051201_V33.cdf

[2020-04-15 16:45:59,323: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20060701_V34.cdf

[2020-04-15 16:45:59,402: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20060801_V33.cdf

[2020-04-15 16:45:59,481: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20060901_V32.cdf

[2020-04-15 16:45:59,558: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20061001_V32.cdf

[2020-04-15 16:45:59,638: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20061101_V33.cdf

[2020-04-15 16:45:59,715: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20061201_V33.cdf

[2020-04-15 16:45:59,796: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20070701_V32.cdf

[2020-04-15 16:45:59,876: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20070801_V31.cdf

[2020-04-15 16:45:59,957: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20070901_V30.cdf

[2020-04-15 16:46:00,040: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20071001_V33.cdf

[2020-04-15 16:46:00,120: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20071101_V31.cdf

[2020-04-15 16:46:00,200: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20071201_V27.cdf

[2020-04-15 16:46:00,282: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20080701_V31.cdf

[2020-04-15 16:46:00,363: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20080801_V31.cdf

[2020-04-15 16:46:00,442: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20080901_V30.cdf

[2020-04-15 16:46:00,520: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20081001_V32.cdf

[2020-04-15 16:46:00,601: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20081101_V28.cdf

[2020-04-15 16:46:00,680: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20081201_V26.cdf

[2020-04-15 16:46:00,760: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20090701_V29.cdf

[2020-04-15 16:46:00,841: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20090801_V29.cdf

[2020-04-15 16:46:00,921: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20090901_V25.cdf

[2020-04-15 16:46:00,999: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20091001_V28.cdf

[2020-04-15 16:46:01,081: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20091101_V30.cdf

[2020-04-15 16:46:01,160: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20091201_V28.cdf

[2020-04-15 16:46:01,240: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20100701_V22.cdf

[2020-04-15 16:46:01,321: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20100801_V22.cdf

[2020-04-15 16:46:01,404: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20100901_V24.cdf

[2020-04-15 16:46:01,482: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20101001_V25.cdf

[2020-04-15 16:46:01,565: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20101101_V24.cdf

[2020-04-15 16:46:01,646: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20101201_V25.cdf

[2020-04-15 16:46:01,730: Fname - mphys.py: Function - info: INFO]
Timing PGP completed in 4.40s

[2020-04-15 16:46:01,833: Fname - mphys.py: Function - info: INFO]
Timing code completed in 4.85s

[2020-04-15 16:46:17,726: Fname - mphys.py: Function - info: INFO]
Timing code

[2020-04-15 16:46:18,057: Fname - mphys.py: Function - info: INFO]
Timing PGP

[2020-04-15 16:46:18,057: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20020701_V47.cdf

[2020-04-15 16:46:18,198: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20020801_V47.cdf

[2020-04-15 16:46:18,283: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20020901_V45.cdf

[2020-04-15 16:46:18,364: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20021001_V47.cdf

[2020-04-15 16:46:18,445: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20021101_V49.cdf

[2020-04-15 16:46:18,522: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20021201_V47.cdf

[2020-04-15 16:46:18,601: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20030701_V60.cdf

[2020-04-15 16:46:18,681: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20030801_V58.cdf

[2020-04-15 16:46:18,762: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20030901_V52.cdf

[2020-04-15 16:46:18,839: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20031001_V52.cdf

[2020-04-15 16:46:18,919: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20031101_V49.cdf

[2020-04-15 16:46:19,034: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20031201_V52.cdf

[2020-04-15 16:46:19,115: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20040701_V41.cdf

[2020-04-15 16:46:19,195: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20040801_V41.cdf

[2020-04-15 16:46:19,275: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20040901_V42.cdf

[2020-04-15 16:46:19,353: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20041001_V42.cdf

[2020-04-15 16:46:19,432: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20041101_V41.cdf

[2020-04-15 16:46:19,510: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20041201_V41.cdf

[2020-04-15 16:46:19,596: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20050701_V34.cdf

[2020-04-15 16:46:19,677: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20050801_V33.cdf

[2020-04-15 16:46:19,758: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20050901_V34.cdf

[2020-04-15 16:46:19,837: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20051001_V35.cdf

[2020-04-15 16:46:19,918: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20051101_V34.cdf

[2020-04-15 16:46:20,026: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20051201_V33.cdf

[2020-04-15 16:46:20,108: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20060701_V34.cdf

[2020-04-15 16:46:20,189: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20060801_V33.cdf

[2020-04-15 16:46:20,271: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20060901_V32.cdf

[2020-04-15 16:46:20,349: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20061001_V32.cdf

[2020-04-15 16:46:20,432: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20061101_V33.cdf

[2020-04-15 16:46:20,518: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20061201_V33.cdf

[2020-04-15 16:46:20,606: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20070701_V32.cdf

[2020-04-15 16:46:20,688: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20070801_V31.cdf

[2020-04-15 16:46:20,770: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20070901_V30.cdf

[2020-04-15 16:46:20,853: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20071001_V33.cdf

[2020-04-15 16:46:20,936: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20071101_V31.cdf

[2020-04-15 16:46:21,014: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20071201_V27.cdf

[2020-04-15 16:46:21,095: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20080701_V31.cdf

[2020-04-15 16:46:21,187: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20080801_V31.cdf

[2020-04-15 16:46:21,268: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20080901_V30.cdf

[2020-04-15 16:46:21,346: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20081001_V32.cdf

[2020-04-15 16:46:21,426: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20081101_V28.cdf

[2020-04-15 16:46:21,506: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20081201_V26.cdf

[2020-04-15 16:46:21,587: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20090701_V29.cdf

[2020-04-15 16:46:21,669: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20090801_V29.cdf

[2020-04-15 16:46:21,751: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20090901_V25.cdf

[2020-04-15 16:46:21,830: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20091001_V28.cdf

[2020-04-15 16:46:21,911: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20091101_V30.cdf

[2020-04-15 16:46:21,990: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20091201_V28.cdf

[2020-04-15 16:46:22,071: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20100701_V22.cdf

[2020-04-15 16:46:22,161: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20100801_V22.cdf

[2020-04-15 16:46:22,252: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20100901_V24.cdf

[2020-04-15 16:46:22,331: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20101001_V25.cdf

[2020-04-15 16:46:22,414: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20101101_V24.cdf

[2020-04-15 16:46:22,496: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20101201_V25.cdf

[2020-04-15 16:46:22,582: Fname - mphys.py: Function - info: INFO]
Timing PGP completed in 4.53s

[2020-04-15 16:46:22,680: Fname - mphys.py: Function - info: INFO]
Timing code completed in 4.95s

[2020-04-15 16:47:39,956: Fname - mphys.py: Function - info: INFO]
Timing code

[2020-04-15 16:47:40,300: Fname - mphys.py: Function - info: INFO]
Timing PGP

[2020-04-15 16:47:40,300: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20020701_V47.cdf

[2020-04-15 16:47:40,445: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20020801_V47.cdf

[2020-04-15 16:47:40,526: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20020901_V45.cdf

[2020-04-15 16:47:40,605: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20021001_V47.cdf

[2020-04-15 16:47:40,685: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20021101_V49.cdf

[2020-04-15 16:47:40,763: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20021201_V47.cdf

[2020-04-15 16:47:40,843: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20030701_V60.cdf

[2020-04-15 16:47:40,922: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20030801_V58.cdf

[2020-04-15 16:47:41,002: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20030901_V52.cdf

[2020-04-15 16:47:41,079: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20031001_V52.cdf

[2020-04-15 16:47:41,159: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20031101_V49.cdf

[2020-04-15 16:47:41,237: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20031201_V52.cdf

[2020-04-15 16:47:41,353: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20040701_V41.cdf

[2020-04-15 16:47:41,433: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20040801_V41.cdf

[2020-04-15 16:47:41,512: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20040901_V42.cdf

[2020-04-15 16:47:41,588: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20041001_V42.cdf

[2020-04-15 16:47:41,668: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20041101_V41.cdf

[2020-04-15 16:47:41,747: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20041201_V41.cdf

[2020-04-15 16:47:41,826: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20050701_V34.cdf

[2020-04-15 16:47:41,906: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20050801_V33.cdf

[2020-04-15 16:47:41,986: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20050901_V34.cdf

[2020-04-15 16:47:42,063: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20051001_V35.cdf

[2020-04-15 16:47:42,146: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20051101_V34.cdf

[2020-04-15 16:47:42,261: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20051201_V33.cdf

[2020-04-15 16:47:42,341: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20060701_V34.cdf

[2020-04-15 16:47:42,421: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20060801_V33.cdf

[2020-04-15 16:47:42,502: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20060901_V32.cdf

[2020-04-15 16:47:42,581: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20061001_V32.cdf

[2020-04-15 16:47:42,661: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20061101_V33.cdf

[2020-04-15 16:47:42,740: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20061201_V33.cdf

[2020-04-15 16:47:42,821: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20070701_V32.cdf

[2020-04-15 16:47:42,901: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20070801_V31.cdf

[2020-04-15 16:47:42,982: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20070901_V30.cdf

[2020-04-15 16:47:43,060: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20071001_V33.cdf

[2020-04-15 16:47:43,142: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20071101_V31.cdf

[2020-04-15 16:47:43,256: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20071201_V27.cdf

[2020-04-15 16:47:43,338: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20080701_V31.cdf

[2020-04-15 16:47:43,419: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20080801_V31.cdf

[2020-04-15 16:47:43,500: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20080901_V30.cdf

[2020-04-15 16:47:43,578: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20081001_V32.cdf

[2020-04-15 16:47:43,659: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20081101_V28.cdf

[2020-04-15 16:47:43,739: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20081201_V26.cdf

[2020-04-15 16:47:43,820: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20090701_V29.cdf

[2020-04-15 16:47:43,900: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20090801_V29.cdf

[2020-04-15 16:47:43,980: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20090901_V25.cdf

[2020-04-15 16:47:44,058: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20091001_V28.cdf

[2020-04-15 16:47:44,138: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20091101_V30.cdf

[2020-04-15 16:47:44,217: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20091201_V28.cdf

[2020-04-15 16:47:44,300: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20100701_V22.cdf

[2020-04-15 16:47:44,381: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20100801_V22.cdf

[2020-04-15 16:47:44,463: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20100901_V24.cdf

[2020-04-15 16:47:44,541: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20101001_V25.cdf

[2020-04-15 16:47:44,623: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20101101_V24.cdf

[2020-04-15 16:47:44,703: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20101201_V25.cdf

[2020-04-15 16:47:44,785: Fname - mphys.py: Function - info: INFO]
Timing PGP completed in 4.48s

[2020-04-15 16:47:44,901: Fname - mphys.py: Function - info: INFO]
Timing code completed in 4.95s

[2020-04-15 16:50:16,906: Fname - mphys.py: Function - info: INFO]
Timing code

[2020-04-15 16:50:17,255: Fname - mphys.py: Function - info: INFO]
Timing PGP

[2020-04-15 16:50:17,256: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20020701_V47.cdf

[2020-04-15 16:50:17,359: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20020801_V47.cdf

[2020-04-15 16:50:17,478: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20020901_V45.cdf

[2020-04-15 16:50:17,555: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20021001_V47.cdf

[2020-04-15 16:50:17,635: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20021101_V49.cdf

[2020-04-15 16:50:17,712: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20021201_V47.cdf

[2020-04-15 16:50:17,792: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20030701_V60.cdf

[2020-04-15 16:50:17,872: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20030801_V58.cdf

[2020-04-15 16:50:17,953: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20030901_V52.cdf

[2020-04-15 16:50:18,030: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20031001_V52.cdf

[2020-04-15 16:50:18,110: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20031101_V49.cdf

[2020-04-15 16:50:18,190: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20031201_V52.cdf

[2020-04-15 16:50:18,281: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20040701_V41.cdf

[2020-04-15 16:50:18,400: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20040801_V41.cdf

[2020-04-15 16:50:18,480: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20040901_V42.cdf

[2020-04-15 16:50:18,558: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20041001_V42.cdf

[2020-04-15 16:50:18,638: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20041101_V41.cdf

[2020-04-15 16:50:18,717: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20041201_V41.cdf

[2020-04-15 16:50:18,802: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20050701_V34.cdf

[2020-04-15 16:50:18,882: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20050801_V33.cdf

[2020-04-15 16:50:18,962: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20050901_V34.cdf

[2020-04-15 16:50:19,039: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20051001_V35.cdf

[2020-04-15 16:50:19,119: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20051101_V34.cdf

[2020-04-15 16:50:19,198: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20051201_V33.cdf

[2020-04-15 16:50:19,316: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20060701_V34.cdf

[2020-04-15 16:50:19,400: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20060801_V33.cdf

[2020-04-15 16:50:19,481: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20060901_V32.cdf

[2020-04-15 16:50:19,559: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20061001_V32.cdf

[2020-04-15 16:50:19,640: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20061101_V33.cdf

[2020-04-15 16:50:19,719: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20061201_V33.cdf

[2020-04-15 16:50:19,802: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20070701_V32.cdf

[2020-04-15 16:50:19,883: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20070801_V31.cdf

[2020-04-15 16:50:19,964: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20070901_V30.cdf

[2020-04-15 16:50:20,044: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20071001_V33.cdf

[2020-04-15 16:50:20,125: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20071101_V31.cdf

[2020-04-15 16:50:20,205: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20071201_V27.cdf

[2020-04-15 16:50:20,322: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20080701_V31.cdf

[2020-04-15 16:50:20,402: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20080801_V31.cdf

[2020-04-15 16:50:20,482: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20080901_V30.cdf

[2020-04-15 16:50:20,560: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20081001_V32.cdf

[2020-04-15 16:50:20,640: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20081101_V28.cdf

[2020-04-15 16:50:20,718: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20081201_V26.cdf

[2020-04-15 16:50:20,800: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20090701_V29.cdf

[2020-04-15 16:50:20,881: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20090801_V29.cdf

[2020-04-15 16:50:20,961: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20090901_V25.cdf

[2020-04-15 16:50:21,039: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20091001_V28.cdf

[2020-04-15 16:50:21,119: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20091101_V30.cdf

[2020-04-15 16:50:21,198: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20091201_V28.cdf

[2020-04-15 16:50:21,279: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20100701_V22.cdf

[2020-04-15 16:50:21,361: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20100801_V22.cdf

[2020-04-15 16:50:21,442: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20100901_V24.cdf

[2020-04-15 16:50:21,522: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20101001_V25.cdf

[2020-04-15 16:50:21,605: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20101101_V24.cdf

[2020-04-15 16:50:21,684: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20101201_V25.cdf

[2020-04-15 16:50:21,767: Fname - mphys.py: Function - info: INFO]
Timing PGP completed in 4.51s

[2020-04-15 16:50:21,893: Fname - mphys.py: Function - info: INFO]
Timing code completed in 4.99s

[2020-04-15 16:51:05,798: Fname - mphys.py: Function - info: INFO]
Timing code

[2020-04-15 16:51:06,122: Fname - mphys.py: Function - info: INFO]
Timing PGP

[2020-04-15 16:51:06,122: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20020701_V47.cdf

[2020-04-15 16:51:06,228: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20020801_V47.cdf

[2020-04-15 16:51:06,343: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20020901_V45.cdf

[2020-04-15 16:51:06,421: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20021001_V47.cdf

[2020-04-15 16:51:06,500: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20021101_V49.cdf

[2020-04-15 16:51:06,578: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20021201_V47.cdf

[2020-04-15 16:51:06,658: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20030701_V60.cdf

[2020-04-15 16:51:06,737: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20030801_V58.cdf

[2020-04-15 16:51:06,817: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20030901_V52.cdf

[2020-04-15 16:51:06,893: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20031001_V52.cdf

[2020-04-15 16:51:06,973: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20031101_V49.cdf

[2020-04-15 16:51:07,051: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20031201_V52.cdf

[2020-04-15 16:51:07,132: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20040701_V41.cdf

[2020-04-15 16:51:07,248: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20040801_V41.cdf

[2020-04-15 16:51:07,327: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20040901_V42.cdf

[2020-04-15 16:51:07,404: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20041001_V42.cdf

[2020-04-15 16:51:07,483: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20041101_V41.cdf

[2020-04-15 16:51:07,560: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20041201_V41.cdf

[2020-04-15 16:51:07,641: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20050701_V34.cdf

[2020-04-15 16:51:07,720: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20050801_V33.cdf

[2020-04-15 16:51:07,801: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20050901_V34.cdf

[2020-04-15 16:51:07,878: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20051001_V35.cdf

[2020-04-15 16:51:07,958: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20051101_V34.cdf

[2020-04-15 16:51:08,036: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20051201_V33.cdf

[2020-04-15 16:51:08,154: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20060701_V34.cdf

[2020-04-15 16:51:08,235: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20060801_V33.cdf

[2020-04-15 16:51:08,316: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20060901_V32.cdf

[2020-04-15 16:51:08,394: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20061001_V32.cdf

[2020-04-15 16:51:08,473: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20061101_V33.cdf

[2020-04-15 16:51:08,552: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20061201_V33.cdf

[2020-04-15 16:51:08,632: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20070701_V32.cdf

[2020-04-15 16:51:08,712: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20070801_V31.cdf

[2020-04-15 16:51:08,793: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20070901_V30.cdf

[2020-04-15 16:51:08,872: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20071001_V33.cdf

[2020-04-15 16:51:08,953: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20071101_V31.cdf

[2020-04-15 16:51:09,032: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20071201_V27.cdf

[2020-04-15 16:51:09,148: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20080701_V31.cdf

[2020-04-15 16:51:09,228: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20080801_V31.cdf

[2020-04-15 16:51:09,308: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20080901_V30.cdf

[2020-04-15 16:51:09,386: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20081001_V32.cdf

[2020-04-15 16:51:09,467: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20081101_V28.cdf

[2020-04-15 16:51:09,545: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20081201_V26.cdf

[2020-04-15 16:51:09,627: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20090701_V29.cdf

[2020-04-15 16:51:09,707: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20090801_V29.cdf

[2020-04-15 16:51:09,788: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20090901_V25.cdf

[2020-04-15 16:51:09,865: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20091001_V28.cdf

[2020-04-15 16:51:09,947: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20091101_V30.cdf

[2020-04-15 16:51:10,026: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20091201_V28.cdf

[2020-04-15 16:51:10,108: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20100701_V22.cdf

[2020-04-15 16:51:10,190: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20100801_V22.cdf

[2020-04-15 16:51:10,272: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20100901_V24.cdf

[2020-04-15 16:51:10,351: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20101001_V25.cdf

[2020-04-15 16:51:10,432: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20101101_V24.cdf

[2020-04-15 16:51:10,513: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20101201_V25.cdf

[2020-04-15 16:51:10,596: Fname - mphys.py: Function - info: INFO]
Timing PGP completed in 4.47s

[2020-04-15 16:52:00,148: Fname - mphys.py: Function - info: INFO]
Timing code completed in 54.35s

[2020-04-15 16:52:17,921: Fname - mphys.py: Function - info: INFO]
Timing code

[2020-04-15 16:52:18,262: Fname - mphys.py: Function - info: INFO]
Timing PGP

[2020-04-15 16:52:18,262: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20020701_V47.cdf

[2020-04-15 16:52:18,367: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20020801_V47.cdf

[2020-04-15 16:52:18,491: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20020901_V45.cdf

[2020-04-15 16:52:18,568: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20021001_V47.cdf

[2020-04-15 16:52:18,649: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20021101_V49.cdf

[2020-04-15 16:52:18,735: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20021201_V47.cdf

[2020-04-15 16:52:18,817: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20030701_V60.cdf

[2020-04-15 16:52:18,896: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20030801_V58.cdf

[2020-04-15 16:52:18,977: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20030901_V52.cdf

[2020-04-15 16:52:19,054: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20031001_V52.cdf

[2020-04-15 16:52:19,134: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20031101_V49.cdf

[2020-04-15 16:52:19,211: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20031201_V52.cdf

[2020-04-15 16:52:19,290: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20040701_V41.cdf

[2020-04-15 16:52:19,407: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20040801_V41.cdf

[2020-04-15 16:52:19,491: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20040901_V42.cdf

[2020-04-15 16:52:19,578: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20041001_V42.cdf

[2020-04-15 16:52:19,664: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20041101_V41.cdf

[2020-04-15 16:52:19,743: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20041201_V41.cdf

[2020-04-15 16:52:19,823: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20050701_V34.cdf

[2020-04-15 16:52:19,904: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20050801_V33.cdf

[2020-04-15 16:52:19,984: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20050901_V34.cdf

[2020-04-15 16:52:20,062: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20051001_V35.cdf

[2020-04-15 16:52:20,142: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20051101_V34.cdf

[2020-04-15 16:52:20,221: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20051201_V33.cdf

[2020-04-15 16:52:20,338: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20060701_V34.cdf

[2020-04-15 16:52:20,419: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20060801_V33.cdf

[2020-04-15 16:52:20,500: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20060901_V32.cdf

[2020-04-15 16:52:20,578: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20061001_V32.cdf

[2020-04-15 16:52:20,657: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20061101_V33.cdf

[2020-04-15 16:52:20,737: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20061201_V33.cdf

[2020-04-15 16:52:20,818: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20070701_V32.cdf

[2020-04-15 16:52:20,899: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20070801_V31.cdf

[2020-04-15 16:52:20,980: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20070901_V30.cdf

[2020-04-15 16:52:21,058: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20071001_V33.cdf

[2020-04-15 16:52:21,139: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20071101_V31.cdf

[2020-04-15 16:52:21,218: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20071201_V27.cdf

[2020-04-15 16:52:21,335: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20080701_V31.cdf

[2020-04-15 16:52:21,416: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20080801_V31.cdf

[2020-04-15 16:52:21,496: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20080901_V30.cdf

[2020-04-15 16:52:21,574: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20081001_V32.cdf

[2020-04-15 16:52:21,657: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20081101_V28.cdf

[2020-04-15 16:52:21,737: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20081201_V26.cdf

[2020-04-15 16:52:21,819: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20090701_V29.cdf

[2020-04-15 16:52:21,899: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20090801_V29.cdf

[2020-04-15 16:52:21,982: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20090901_V25.cdf

[2020-04-15 16:52:22,061: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20091001_V28.cdf

[2020-04-15 16:52:22,142: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20091101_V30.cdf

[2020-04-15 16:52:22,222: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20091201_V28.cdf

[2020-04-15 16:52:22,305: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20100701_V22.cdf

[2020-04-15 16:52:22,386: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20100801_V22.cdf

[2020-04-15 16:52:22,467: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20100901_V24.cdf

[2020-04-15 16:52:22,546: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20101001_V25.cdf

[2020-04-15 16:52:22,628: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20101101_V24.cdf

[2020-04-15 16:52:22,708: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20101201_V25.cdf

[2020-04-15 16:52:22,790: Fname - mphys.py: Function - info: INFO]
Timing PGP completed in 4.53s

[2020-04-15 16:55:09,017: Fname - mphys.py: Function - info: INFO]
Timing code completed in 171.10s

[2020-04-16 15:27:08,725: Fname - __init__.py: Function - wrapper: DEBUG]
CONFIGDIR=/home/james/.config/matplotlib

[2020-04-16 15:27:08,727: Fname - __init__.py: Function - wrapper: DEBUG]
(private) matplotlib data path: /home/james/.local/lib/python3.6/site-packages/matplotlib/mpl-data

[2020-04-16 15:27:08,733: Fname - __init__.py: Function - wrapper: DEBUG]
matplotlib data path: /home/james/.local/lib/python3.6/site-packages/matplotlib/mpl-data

[2020-04-16 15:27:08,733: Fname - __init__.py: Function - rc_params_from_file: DEBUG]
loaded rc file /home/james/.local/lib/python3.6/site-packages/matplotlib/mpl-data/matplotlibrc

[2020-04-16 15:27:08,735: Fname - __init__.py: Function - <module>: DEBUG]
matplotlib version 3.2.1

[2020-04-16 15:27:08,736: Fname - __init__.py: Function - <module>: DEBUG]
interactive is False

[2020-04-16 15:27:08,736: Fname - __init__.py: Function - <module>: DEBUG]
platform is linux

[2020-04-16 15:27:08,736: Fname - __init__.py: Function - <module>: DEBUG]
loaded modules: ['builtins', 'sys', '_frozen_importlib', '_imp', '_warnings', '_thread', '_weakref', '_frozen_importlib_external', '_io', 'marshal', 'posix', 'zipimport', 'encodings', 'codecs', '_codecs', 'encodings.aliases', 'encodings.utf_8', '_signal', '__main__', 'encodings.latin_1', 'io', 'abc', '_weakrefset', '_bootlocale', '_locale', 'site', 'os', 'errno', 'stat', '_stat', 'posixpath', 'genericpath', 'os.path', '_collections_abc', '_sitebuiltins', 'sysconfig', '_sysconfigdata_m_linux_x86_64-linux-gnu', 'types', 'functools', '_functools', 'collections', 'operator', '_operator', 'keyword', 'heapq', '_heapq', 'itertools', 'reprlib', '_collections', 'weakref', 'collections.abc', 'importlib', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib.util', 'importlib.abc', 'importlib.machinery', 'contextlib', 'mpl_toolkits', 'zope', 'sitecustomize', 'apport_python_hook', 'runpy', 'pkgutil', 'ipykernel', 'ipykernel._version', 'ipykernel.connect', '__future__', 'json', 'json.decoder', 're', 'enum', 'sre_compile', '_sre', 'sre_parse', 'sre_constants', 'copyreg', 'json.scanner', '_json', 'json.encoder', 'subprocess', 'time', 'signal', '_posixsubprocess', 'select', 'selectors', 'math', 'threading', 'traceback', 'linecache', 'tokenize', 'token', 'IPython', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'IPython.core.application', 'atexit', 'copy', 'glob', 'fnmatch', 'logging', 'string', '_string', 'shutil', 'zlib', 'bz2', '_compression', '_bz2', 'lzma', '_lzma', 'pwd', 'grp', 'traitlets', 'traitlets.traitlets', 'inspect', 'ast', '_ast', 'dis', 'opcode', '_opcode', 'six', 'struct', '_struct', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'ipython_genutils', 'ipython_genutils._version', 'ipython_genutils.py3compat', 'ipython_genutils.encoding', 'locale', 'platform', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets._version', 'traitlets.config', 'traitlets.config.application', 'decorator', 'traitlets.config.configurable', 'traitlets.config.loader', 'argparse', 'textwrap', 'gettext', 'ipython_genutils.path', 'random', 'hashlib', '_hashlib', '_blake2', '_sha3', 'bisect', '_bisect', '_random', 'ipython_genutils.text', 'ipython_genutils.importstring', 'IPython.core.crashhandler', 'pprint', 'IPython.core.ultratb', 'pydoc', 'urllib', 'urllib.parse', 'IPython.core.debugger', 'bdb', 'IPython.utils', 'IPython.utils.PyColorize', 'IPython.utils.coloransi', 'IPython.utils.ipstruct', 'IPython.utils.colorable', 'pygments', 'IPython.utils.py3compat', 'IPython.utils.encoding', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'pdb', 'cmd', 'code', 'codeop', 'IPython.core.display_trap', 'IPython.utils.path', 'IPython.utils.process', 'IPython.utils._process_posix', 'pexpect', 'pexpect.exceptions', 'pexpect.utils', 'pexpect.expect', 'pexpect.pty_spawn', 'pty', 'tty', 'termios', 'ptyprocess', 'ptyprocess.ptyprocess', 'fcntl', 'resource', 'ptyprocess.util', 'pexpect.spawnbase', 'pexpect.run', 'IPython.utils._process_common', 'shlex', 'IPython.utils.decorators', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.utils.sysinfo', 'IPython.utils._sysinfo', 'IPython.core.profiledir', 'IPython.paths', 'tempfile', 'IPython.utils.importstring', 'IPython.terminal', 'IPython.terminal.embed', 'IPython.core.compilerop', 'IPython.core.magic_arguments', 'IPython.core.error', 'IPython.utils.text', 'pathlib', 'ntpath', 'IPython.core.magic', 'getopt', 'IPython.core.oinspect', 'typing', 'typing.io', 'typing.re', 'IPython.core.page', 'IPython.core.display', 'binascii', 'mimetypes', 'IPython.lib', 'IPython.lib.security', 'getpass', 'IPython.lib.pretty', 'datetime', '_datetime', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers.python', 'pygments.lexer', 'pygments.filter', 'pygments.filters', 'pygments.token', 'pygments.regexopt', 'pygments.unistring', 'pygments.formatters', 'pygments.formatters._mapping', 'pygments.formatters.html', 'pygments.formatter', 'pygments.styles', 'IPython.core.inputtransformer2', 'IPython.core.interactiveshell', 'pickleshare', 'pickle', '_compat_pickle', '_pickle', 'IPython.core.prefilter', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.alias', 'IPython.core.builtin_trap', 'IPython.core.events', 'backcall', 'backcall.backcall', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.core.formatters', 'IPython.utils.sentinel', 'IPython.core.history', 'sqlite3', 'sqlite3.dbapi2', '_sqlite3', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'IPython.display', 'IPython.lib.display', 'html', 'html.entities', 'IPython.utils.io', 'IPython.utils.capture', 'IPython.utils.strdispatch', 'IPython.core.hooks', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.terminal.interactiveshell', 'asyncio', 'asyncio.base_events', 'concurrent', 'concurrent.futures', 'concurrent.futures._base', 'concurrent.futures.process', 'queue', 'multiprocessing', 'multiprocessing.context', 'multiprocessing.process', 'multiprocessing.reduction', 'socket', '_socket', 'array', '__mp_main__', 'multiprocessing.connection', '_multiprocessing', 'multiprocessing.util', 'concurrent.futures.thread', 'asyncio.compat', 'asyncio.coroutines', 'asyncio.constants', 'asyncio.events', 'asyncio.base_futures', 'asyncio.log', 'asyncio.futures', 'asyncio.base_tasks', '_asyncio', 'asyncio.tasks', 'asyncio.locks', 'asyncio.protocols', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.transports', 'asyncio.unix_events', 'asyncio.base_subprocess', 'asyncio.selector_events', 'ssl', 'ipaddress', '_ssl', 'base64', 'asyncio.sslproto', 'prompt_toolkit', 'prompt_toolkit.application', 'prompt_toolkit.application.application', 'prompt_toolkit.buffer', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop', 'prompt_toolkit.eventloop.async_generator', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.dummy_contextvars', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.utils', 'wcwidth', 'wcwidth.wcwidth', 'wcwidth.table_wide', 'wcwidth.table_zero', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.eventloop.async_context_manager', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.document', 'prompt_toolkit.clipboard', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.filters', 'prompt_toolkit.filters.app', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.completion', 'prompt_toolkit.completion.base', 'prompt_toolkit.formatted_text', 'prompt_toolkit.formatted_text.ansi', 'prompt_toolkit.output', 'prompt_toolkit.output.base', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.pygments', 'prompt_toolkit.styles.style_transformation', 'colorsys', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.defaults', 'prompt_toolkit.patch_stdout', 'prompt_toolkit.output.vt100', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.html', 'xml', 'xml.dom', 'xml.dom.domreg', 'xml.dom.minidom', 'xml.dom.minicompat', 'xml.dom.xmlbuilder', 'xml.dom.NodeFilter', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.history', 'prompt_toolkit.search', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.validation', 'prompt_toolkit.input', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.layout', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.controls', 'prompt_toolkit.lexers', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.dummy', 'prompt_toolkit.shortcuts', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.utils', 'pygments.style', 'IPython.terminal.debugger', 'IPython.core.completer', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'jedi', 'jedi.api', 'parso', 'parso.parser', 'parso.tree', 'parso._compatibility', 'parso.utils', 'parso.pgen2', 'parso.pgen2.generator', 'parso.pgen2.grammar_parser', 'parso.python', 'parso.python.tokenize', 'parso.python.token', 'parso.grammar', 'parso.python.diff', 'difflib', 'parso.python.parser', 'parso.python.tree', 'parso.python.prefix', 'parso.cache', 'gc', 'parso.python.errors', 'parso.normalizer', 'parso.python.pep8', 'parso.file_io', 'jedi._compatibility', 'jedi.file_io', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.api.classes', 'jedi.inference', 'jedi.inference.imports', 'jedi.inference.sys_path', 'jedi.inference.cache', 'jedi.inference.base_value', 'jedi.common', 'jedi.common.value', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.common.utils', 'jedi.inference.compiled', 'jedi.inference.compiled.value', 'jedi.inference.filters', 'jedi.inference.flow_analysis', 'jedi.inference.recursion', 'jedi.inference.names', 'jedi.inference.docstrings', 'jedi.inference.lazy_value', 'jedi.plugins', 'jedi.inference.compiled.access', 'jedi.inference.compiled.getattr_static', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.gradual.typeshed', 'jedi.inference.gradual.stub_value', 'jedi.inference.value', 'jedi.inference.value.module', 'jedi.inference.value.klass', 'jedi.inference.arguments', 'jedi.inference.value.iterable', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.function', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.instance', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.syntax_tree', 'jedi.inference.gradual.annotation', 'jedi.inference.param', 'jedi.inference.value.decorator', 'jedi.inference.gradual.conversion', 'jedi.api.keywords', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.interpreter', 'jedi.inference.compiled.mixed', 'jedi.api.completion', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.environment', 'filecmp', 'jedi.inference.compiled.subprocess', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.api.project', 'jedi.inference.references', 'jedi.inference.gradual.utils', 'jedi.plugins.registry', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'IPython.terminal.ptutils', 'IPython.terminal.shortcuts', 'IPython.terminal.magics', 'IPython.lib.clipboard', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.ipapp', 'IPython.core.magics', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'IPython.core.magics.code', 'urllib.request', 'email', 'http', 'http.client', 'email.parser', 'email.feedparser', 'email.errors', 'email._policybase', 'email.header', 'email.quoprimime', 'email.base64mime', 'email.charset', 'email.encoders', 'quopri', 'email.utils', 'email._parseaddr', 'calendar', 'email.message', 'uu', 'email._encoded_words', 'email.iterators', 'urllib.error', 'urllib.response', 'IPython.core.magics.config', 'IPython.core.magics.display', 'IPython.core.magics.execution', 'timeit', 'cProfile', '_lsprof', 'profile', 'optparse', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.magics.pylab', 'IPython.core.pylabtools', 'IPython.core.magics.script', 'IPython.lib.backgroundjobs', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.utils.frame', 'jupyter_client', 'jupyter_client._version', 'jupyter_client.connect', 'zmq', 'ctypes', '_ctypes', 'ctypes._endian', 'zmq.backend', 'zmq.backend.select', 'zmq.backend.cython', 'zmq.backend.cython.constants', 'cython_runtime', 'zmq.backend.cython.error', '_cython_0_29_15', 'zmq.backend.cython.message', 'zmq.error', 'zmq.backend.cython.context', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.sugar', 'zmq.sugar.constants', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.context', 'zmq.sugar.attrsettr', 'zmq.sugar.socket', 'zmq.sugar.poll', 'zmq.utils.jsonapi', 'zmq.utils.strtypes', 'simplejson', 'decimal', 'numbers', '_decimal', 'simplejson.errors', 'simplejson.raw_json', 'simplejson.decoder', 'simplejson.compat', 'simplejson.scanner', 'simplejson._speedups', 'simplejson.encoder', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'jupyter_client.localinterfaces', 'jupyter_core', 'jupyter_core.version', 'jupyter_core.paths', 'distutils', 'distutils.util', 'distutils.errors', 'distutils.dep_util', 'distutils.spawn', 'distutils.debug', 'distutils.log', 'jupyter_client.launcher', 'traitlets.log', 'jupyter_client.client', 'jupyter_client.channels', 'jupyter_client.channelsabc', 'jupyter_client.clientabc', 'jupyter_client.manager', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.blocking', 'jupyter_client.blocking.client', 'jupyter_client.blocking.channels', 'jupyter_client.asynchronous', 'jupyter_client.asynchronous.client', 'zmq.asyncio', 'zmq._future', 'jupyter_client.asynchronous.channels', 'jupyter_client.multikernelmanager', 'uuid', 'ctypes.util', 'ipykernel.kernelapp', 'tornado', 'tornado.ioloop', 'tornado.concurrent', 'tornado.log', 'logging.handlers', 'tornado.escape', 'tornado.util', 'tornado.speedups', 'curses', '_curses', 'zmq.eventloop', 'zmq.eventloop.ioloop', 'tornado.platform', 'tornado.platform.asyncio', 'tornado.gen', 'zmq.eventloop.zmqstream', 'ipykernel.iostream', 'imp', 'jupyter_client.session', 'hmac', 'jupyter_client.jsonutil', 'dateutil', 'dateutil._version', 'dateutil.parser', 'dateutil.parser._parser', 'dateutil.relativedelta', 'dateutil._common', 'dateutil.tz', 'dateutil.tz.tz', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.parser.isoparser', '_strptime', 'jupyter_client.adapter', 'ipykernel.heartbeat', 'ipykernel.ipkernel', 'IPython.utils.tokenutil', 'ipykernel.comm', 'ipykernel.comm.manager', 'ipykernel.comm.comm', 'ipykernel.kernelbase', 'tornado.queues', 'tornado.locks', 'ipykernel.jsonutil', 'ipykernel.zmqshell', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.eventloops', 'distutils.version', 'ipykernel.parentpoller', 'netifaces', 'faulthandler', 'ipykernel.datapub', 'ipykernel.serialize', 'ipykernel.pickleutil', 'ipykernel.codeutil', 'IPython.core.completerlib', 'storemagic', 'mphys', 'cdflib', 'cdflib.cdfread', 'numpy', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'numpy._distributor_init', 'numpy.core', 'numpy.core.multiarray', 'numpy.core.overrides', 'numpy.core._multiarray_umath', 'numpy.compat', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.core.umath', 'numpy.core.numerictypes', 'numpy.core._string_helpers', 'numpy.core._type_aliases', 'numpy.core._dtype', 'numpy.core.numeric', 'numpy.core.shape_base', 'numpy.core._asarray', 'numpy.core.fromnumeric', 'numpy.core._methods', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._add_newdocs', 'numpy.core._multiarray_tests', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.lib', 'numpy.lib.mixins', 'numpy.lib.scimath', 'numpy.lib.type_check', 'numpy.lib.ufunclike', 'numpy.lib.index_tricks', 'numpy.matrixlib', 'numpy.matrixlib.defmatrix', 'numpy.linalg', 'numpy.linalg.linalg', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.lib.function_base', 'numpy.lib.histograms', 'numpy.lib.stride_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.npyio', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.fft', 'numpy.fft._pocketfft', 'numpy.fft._pocketfft_internal', 'numpy.fft.helper', 'numpy.polynomial', 'numpy.polynomial.polynomial', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.random', 'numpy.random._pickle', 'numpy.random.mtrand', 'numpy.random._bit_generator', 'numpy.random._common', 'secrets', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.ctypeslib', 'numpy.ma', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.testing', 'unittest', 'unittest.result', 'unittest.util', 'unittest.case', 'unittest.suite', 'unittest.loader', 'unittest.main', 'unittest.runner', 'unittest.signals', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'gzip', 'cdflib.epochs', 'csv', '_csv', 'cdflib.cdfwrite', 'pandas', 'pytz', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pandas.compat', 'pandas.compat.numpy', 'pandas._libs', 'pandas._libs.tslibs', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.c_timestamp', 'pandas._libs.tslibs.nattype', '_cython_0_29_13', 'pandas._libs.missing', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.ops_dispatch', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.ccalendar', 'pandas._config', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.frequencies', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.timestamps', 'pandas._libs.tslibs.resolution', 'pandas._libs.hashtable', 'pandas._libs.lib', 'fractions', 'pandas._libs.tslib', 'pandas.core', 'pandas.core.config_init', 'pandas.core.api', 'pandas.core.dtypes', 'pandas.core.dtypes.dtypes', 'pandas._libs.interval', 'pandas._libs.algos', 'pandas._typing', 'pandas.core.dtypes.base', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.common', 'pandas.core.algorithms', 'pandas.util', 'pandas.util._decorators', 'pandas._libs.properties', 'pandas.core.util', 'pandas.core.util.hashing', 'pandas._libs.hashing', 'pandas.core.dtypes.cast', 'pandas.util._validators', 'pandas.core.common', 'pandas.core.construction', 'pandas.core.indexers', 'pandas.core.arrays', 'pandas.core.arrays.base', 'pandas.compat.numpy.function', 'pandas.core.ops', 'pandas.core.ops.array_ops', 'pandas._libs.ops', 'pandas.core.ops.missing', 'pandas.core.ops.roperator', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.missing', 'pandas.compat._optional', 'pandas.core.sorting', 'pandas.core.arrays.boolean', 'pandas.core.nanops', 'pandas.core.arrays.masked', 'pandas.core.arrays.categorical', 'pandas.core.accessor', 'pandas.core.base', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.datetimelike', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.tseries.offsets', 'dateutil.easter', 'pandas.core.arrays._ranges', 'pandas.core.arrays.integer', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.interval', 'pandas.core.indexes', 'pandas.core.indexes.base', 'pandas._libs.index', 'pandas._libs.join', 'pandas.core.dtypes.concat', 'pandas.core.indexes.frozen', 'pandas.io.formats.printing', 'pandas.core.strings', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.sparse', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse.array', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.core.arrays.string_', 'pandas.core.arrays.timedeltas', 'pandas.core.groupby', 'pandas.core.groupby.generic', 'pandas.core.frame', 'pandas.core.generic', 'pandas.core.indexes.api', 'pandas.core.indexes.category', 'pandas.core.indexes.extension', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.datetimelike', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.tools.datetimes', 'pandas.arrays', 'pandas.core.indexes.interval', 'pandas.util._exceptions', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexing', 'pandas._libs.indexing', 'pandas.core.internals', 'pandas.core.internals.blocks', 'pandas._libs.writers', 'pandas._libs.internals', 'pandas.core.internals.managers', 'pandas.core.internals.concat', 'pandas.io.formats.format', 'pandas.io.common', 'mmap', 'zipfile', 'pandas.core.internals.construction', 'pandas.core.series', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.plotting', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.core.window', 'pandas.core.window.ewm', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.window.common', 'pandas.core.groupby.base', 'pandas.core.window.rolling', 'pandas.core.window.indexers', 'pandas._libs.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.expanding', 'pandas.core.groupby.groupby', 'pandas._libs.groupby', 'pandas.core.groupby.ops', 'pandas._libs.reduction', 'pandas.core.groupby.grouper', 'pandas.core.groupby.categorical', 'pandas.tseries.api', 'pandas.core.computation', 'pandas.core.computation.api', 'pandas.core.computation.eval', 'pandas.core.computation.engines', 'pandas.core.computation.align', 'pandas.core.computation.common', 'pandas.core.computation.ops', 'pandas.core.computation.scope', 'pandas.compat.chainmap', 'pandas.core.computation.expr', 'pandas.core.computation.parsing', 'pandas.core.reshape', 'pandas.core.reshape.api', 'pandas.core.reshape.concat', 'pandas.core.reshape.melt', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.util', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.api.types', 'pandas.core.dtypes.api', 'pandas.util._print_versions', 'pandas.io.api', 'pandas.io.clipboards', 'pandas.io.excel', 'pandas.io.excel._base', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.parsers', 'pandas.io.date_converters', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._xlrd', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlsxwriter', 'pandas._libs.json', 'pandas.io.excel._xlwt', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json', 'pandas.io.json._json', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.io.pickle', 'pandas.compat.pickle_compat', 'pandas.io.pytables', 'pandas.core.computation.pytables', 'pandas.io.sas', 'pandas.io.sas.sasreader', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.util._tester', 'pandas.testing', 'pandas._testing', 'pandas._libs.testing', 'pandas._version', 'progress', 'progress.bar', 'matplotlib', 'matplotlib.cbook', 'matplotlib.cbook.deprecation', 'matplotlib.rcsetup', 'matplotlib.fontconfig_pattern', 'pyparsing', 'matplotlib.colors', 'matplotlib.docstring', 'matplotlib._color_data', 'cycler', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']

[2020-04-16 15:27:08,779: Fname - __init__.py: Function - wrapper: DEBUG]
CACHEDIR=/home/james/.cache/matplotlib

[2020-04-16 15:27:08,783: Fname - font_manager.py: Function - <module>: DEBUG]
Using fontManager instance from /home/james/.cache/matplotlib/fontlist-v310.json

[2020-04-16 15:27:08,930: Fname - pyplot.py: Function - switch_backend: DEBUG]
Loaded backend module://ipykernel.pylab.backend_inline version unknown.

[2020-04-16 15:27:08,938: Fname - pyplot.py: Function - switch_backend: DEBUG]
Loaded backend module://ipykernel.pylab.backend_inline version unknown.

[2020-04-16 15:27:09,430: Fname - mphys.py: Function - info: INFO]
Timing code

[2020-04-16 15:27:09,822: Fname - mphys.py: Function - info: INFO]
Timing PGP

[2020-04-16 15:27:09,822: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20020701_V47.cdf

[2020-04-16 15:27:09,930: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20020801_V47.cdf

[2020-04-16 15:27:10,009: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20020901_V45.cdf

[2020-04-16 15:27:10,091: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20021001_V47.cdf

[2020-04-16 15:27:10,173: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20021101_V49.cdf

[2020-04-16 15:27:10,253: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20021201_V47.cdf

[2020-04-16 15:27:10,371: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20030701_V60.cdf

[2020-04-16 15:27:10,450: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20030801_V58.cdf

[2020-04-16 15:27:10,532: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20030901_V52.cdf

[2020-04-16 15:27:10,609: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20031001_V52.cdf

[2020-04-16 15:27:10,690: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20031101_V49.cdf

[2020-04-16 15:27:10,767: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20031201_V52.cdf

[2020-04-16 15:27:10,850: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20040701_V41.cdf

[2020-04-16 15:27:10,933: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20040801_V41.cdf

[2020-04-16 15:27:11,016: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20040901_V42.cdf

[2020-04-16 15:27:11,098: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20041001_V42.cdf

[2020-04-16 15:27:11,176: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20041101_V41.cdf

[2020-04-16 15:27:11,292: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20041201_V41.cdf

[2020-04-16 15:27:11,376: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20050701_V34.cdf

[2020-04-16 15:27:11,459: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20050801_V33.cdf

[2020-04-16 15:27:11,543: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20050901_V34.cdf

[2020-04-16 15:27:11,622: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20051001_V35.cdf

[2020-04-16 15:27:11,702: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20051101_V34.cdf

[2020-04-16 15:27:11,784: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20051201_V33.cdf

[2020-04-16 15:27:11,867: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20060701_V34.cdf

[2020-04-16 15:27:11,951: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20060801_V33.cdf

[2020-04-16 15:27:12,031: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20060901_V32.cdf

[2020-04-16 15:27:12,108: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20061001_V32.cdf

[2020-04-16 15:27:12,226: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20061101_V33.cdf

[2020-04-16 15:27:12,308: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20061201_V33.cdf

[2020-04-16 15:27:12,390: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20070701_V32.cdf

[2020-04-16 15:27:12,474: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20070801_V31.cdf

[2020-04-16 15:27:12,559: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20070901_V30.cdf

[2020-04-16 15:27:12,640: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20071001_V33.cdf

[2020-04-16 15:27:12,721: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20071101_V31.cdf

[2020-04-16 15:27:12,800: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20071201_V27.cdf

[2020-04-16 15:27:12,883: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20080701_V31.cdf

[2020-04-16 15:27:12,967: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20080801_V31.cdf

[2020-04-16 15:27:13,052: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20080901_V30.cdf

[2020-04-16 15:27:13,134: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20081001_V32.cdf

[2020-04-16 15:27:13,245: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20081101_V28.cdf

[2020-04-16 15:27:13,324: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20081201_V26.cdf

[2020-04-16 15:27:13,409: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20090701_V29.cdf

[2020-04-16 15:27:13,495: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20090801_V29.cdf

[2020-04-16 15:27:13,580: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20090901_V25.cdf

[2020-04-16 15:27:13,660: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20091001_V28.cdf

[2020-04-16 15:27:13,741: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20091101_V30.cdf

[2020-04-16 15:27:13,824: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20091201_V28.cdf

[2020-04-16 15:27:13,909: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20100701_V22.cdf

[2020-04-16 15:27:13,991: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20100801_V22.cdf

[2020-04-16 15:27:14,075: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20100901_V24.cdf

[2020-04-16 15:27:14,154: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20101001_V25.cdf

[2020-04-16 15:27:14,237: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20101101_V24.cdf

[2020-04-16 15:27:14,323: Fname - mphys.py: Function - pgp: INFO]
/home/james/Documents/MPHYS_ARCHIVE/PGP/CL_JP_PGP_20101201_V25.cdf

[2020-04-16 15:27:14,410: Fname - mphys.py: Function - info: INFO]
Timing PGP completed in 4.59s
